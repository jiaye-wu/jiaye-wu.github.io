<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://jiaye-wu.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://jiaye-wu.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-08-13T15:38:11+00:00</updated><id>https://jiaye-wu.github.io/feed.xml</id><title type="html">blank</title><subtitle>This website is based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Academic Tool: QUICKphotonics Project</title><link href="https://jiaye-wu.github.io/2024-QUICKphotonics-project/" rel="alternate" type="text/html" title="Academic Tool: QUICKphotonics Project"/><published>2024-06-25T00:00:00+00:00</published><updated>2024-06-25T00:00:00+00:00</updated><id>https://jiaye-wu.github.io/blog-post</id><content type="html" xml:base="https://jiaye-wu.github.io/2024-QUICKphotonics-project/"><![CDATA[<p><strong>QUICKphotonics</strong> (Quick UnIt Conversion Kit for Photonics) is a MATLAB-powered, commandline-style, <strong>lightweight</strong> and <strong>modular</strong> (expandable framework) tool for unit conversion in optics and photonics. It is currently a proprietary software maintained by <a href="https://jiaye-wu.github.io">Jiaye Wu</a> and distributed under the <a href="https://opensource.org/license/mit">MIT license</a>.</p> <ul> <li>To use this MATLAB Toolbox App binary, MATLAB version equals or larger than R2022b (9.13) should be installed. Older versions are not tested.</li> <li>Install <strong>QUICKphotonics.mlappinstall</strong> and type <code class="language-plaintext highlighter-rouge">QUICKphotonics</code> or <code class="language-plaintext highlighter-rouge">QUICK</code> in the command window to start.</li> <li>In some cases, after restarting MATLAB, you need to manually find and click this application in the <em>APP</em> tab &gt; <em>My app</em> on the top to (re)-enable it.</li> </ul> <h2 id="what-problemspain-spots-does-it-solve-why-do-i-make-this-tool">What problems/pain spots does it solve? Why do I make this tool?</h2> <p>The purpose of this software is to <strong>enable quick lookup</strong> of values in experiments or academic discussions.</p> <p>The common conversions and calculations in optics &amp; photonics such as “frequency difference to wavelength difference at a certain band”, “photon energy”, “Fresnel reflection at an angle”, etc., are simple, <strong>yet</strong>:</p> <ul> <li>Writing a script function on-demand requires looking-up for the formula/constants, even verifications.</li> <li>Subsequently, your function files could become too many and non-centralized. You might not remember where to find them in a later project.</li> <li>Every time you use your old scripts, you might have to check your previous definitions (function names, units used, order of the values). If not careful enough, the results can be orders of magnitude off.</li> </ul> <p>With the QUICKphotonics MATLAB Toolbox:</p> <ul> <li>You do not need to remember where you put the files. Once installed, just call the toolbox using <code class="language-plaintext highlighter-rouge">QUICKphotonics</code> or <code class="language-plaintext highlighter-rouge">QUICK</code> in the command window, or find it in your <em>MATLAB apps</em> tab.</li> <li>The commands are flexibly spelt with auto-recognized units, which is very intuitive to use.</li> </ul> <h2 id="feedbacks--downloads">Feedbacks &amp; downloads</h2> <p>Bug reports and feature requests are open on my <a href="https://github.com/jiaye-wu/QUICKphotonics">GitHub project page</a>.</p> <p>If you find my tool useful, please consider citing my <a href="https://scholar.google.com/citations?user=D2n8tswAAAAJ">academic works</a> where suitable.</p> <h2 id="feature-introducing-the-flexicommand">Feature: introducing the <em>flexiCommand</em></h2> <p>Introducing the <strong>flexiCommand</strong>, an <em>intuitive</em> and <em>easy-to-remember</em> type of command with <strong>auto unit-recognition</strong> and <strong>flexible element order</strong>.</p> <p>A <strong>flexiCommand</strong> consists of 4~5 parts</p> <ul> <li><strong>head</strong>: leading command head (only in some commands, <code class="language-plaintext highlighter-rouge">energy</code>, <code class="language-plaintext highlighter-rouge">reflect</code>, <code class="language-plaintext highlighter-rouge">cav</code>, <code class="language-plaintext highlighter-rouge">power</code>, etc.)</li> <li><strong>conv_source</strong>: <a href="#reserved-words">reserve name</a> of the conversion source, e.g., <code class="language-plaintext highlighter-rouge">freq</code></li> <li><strong>unit_source</strong>: <a href="#supported-units">unit</a> of the conversion source, e.g., <code class="language-plaintext highlighter-rouge">THz</code>. Units are automatically recognized.</li> <li><strong>conv_target</strong>: 2+(reserve name of the conversion target), e.g., <code class="language-plaintext highlighter-rouge">2wl</code>. Here <code class="language-plaintext highlighter-rouge">2</code> means “to”.</li> <li><strong>unit_source</strong>: <a href="#supported-units">unit</a> of the conversion target, e.g., <code class="language-plaintext highlighter-rouge">nm</code>. Units are automatically recognized.</li> </ul> <p>Except for <strong>head</strong>, the <strong>order</strong> of the rest parts <strong>does not matter</strong> in a <strong>flexiCommand</strong>. To avoid any errors caused by ambiguity, please do not use combinations like <code class="language-plaintext highlighter-rouge">t</code>(time) next to <code class="language-plaintext highlighter-rouge">Hz</code> or <code class="language-plaintext highlighter-rouge">nm</code> next to <code class="language-plaintext highlighter-rouge">J</code>.</p> <p>For example, <code class="language-plaintext highlighter-rouge">wlnm2freqTHz 1550</code>, <code class="language-plaintext highlighter-rouge">nmTHzwl2freq 1550</code>, <code class="language-plaintext highlighter-rouge">wl2freqTHznm 1550</code> are treated as the same command, and it does the same thing as <code class="language-plaintext highlighter-rouge">wlum2freqTHz 1.550</code> which converts 1550 nm to frequency in THz.</p> <p><strong>Note:</strong></p> <ul> <li>All commands are case-sensitive.</li> <li>The commands tolerate irrelevant excessive letters, as long as the elements are accurate and intact.</li> </ul> <h2 id="simple-commmands">Simple commmands:</h2> <ul> <li>For changelog: <code class="language-plaintext highlighter-rouge">changelog</code></li> <li>For help and supported functions: <code class="language-plaintext highlighter-rouge">help</code> / <code class="language-plaintext highlighter-rouge">functions</code> / <code class="language-plaintext highlighter-rouge">commands</code> / <code class="language-plaintext highlighter-rouge">flexiCommand</code> / <code class="language-plaintext highlighter-rouge">flexiCMD</code></li> <li>For optical constants: <code class="language-plaintext highlighter-rouge">constants</code></li> <li>For author info/credits/licence/important notes: <code class="language-plaintext highlighter-rouge">about</code> / <code class="language-plaintext highlighter-rouge">info</code> / <code class="language-plaintext highlighter-rouge">credits</code> / <code class="language-plaintext highlighter-rouge">license</code> / <code class="language-plaintext highlighter-rouge">licence</code></li> <li>For closing/terminating the programme: <code class="language-plaintext highlighter-rouge">close</code> / <code class="language-plaintext highlighter-rouge">exit</code></li> </ul> <h2 id="unit-conversions--calculations">Unit conversions &amp; calculations</h2> <h3 id="1-flexicommand-value-1">1. <code class="language-plaintext highlighter-rouge">flexiCommand &lt;value-1&gt;</code></h3> <h4 id="11-wavelength-and-frequency-conversion-wlwl_unit2freqfreq_unit-value">1.1 Wavelength and frequency conversion: <code class="language-plaintext highlighter-rouge">wl(wl_unit)2freq(freq_unit) &lt;value&gt;</code></h4> <p>(wl_unit): <code class="language-plaintext highlighter-rouge">*m</code> (nm, um, m, etc.) see <a href="#supported-units">unit</a>.</p> <p>(freq_unit): <code class="language-plaintext highlighter-rouge">*Hz</code> (THz, GHz, Hz, etc.) see <a href="#supported-units">unit</a>.</p> <p>For example, convert 1550 nm to THz, the command is <code class="language-plaintext highlighter-rouge">wlnm2freqTHz 1550</code> (or <code class="language-plaintext highlighter-rouge">wlm2freqTHz 1550e-9</code> or in other units).</p> <p>Likewise, <code class="language-plaintext highlighter-rouge">freqTHz2wlnm 193</code> means convert 193 THz to nm.</p> <h4 id="12-frequency-and-time-period-conversion-freqfreq_unit2tt_unit-value">1.2 Frequency and time period conversion: <code class="language-plaintext highlighter-rouge">freq(freq_unit)2t(t_unit) &lt;value&gt;</code></h4> <p>(t_unit): <code class="language-plaintext highlighter-rouge">*s</code> (ps, ns, ms, etc.) see <a href="#supported-units">unit</a>.</p> <p>For example, convert 5 GHz to time in ps, the command is <code class="language-plaintext highlighter-rouge">freqGHz2tps 5</code> (or <code class="language-plaintext highlighter-rouge">freqGHz2tps 5e9</code> or in other units).</p> <p>Likewise, <code class="language-plaintext highlighter-rouge">tps2freqGHz 4</code> means convert 4 ps to GHz.</p> <h4 id="13-power-converstion-powermwdbm2dbmmw-value">1.3 Power converstion: <code class="language-plaintext highlighter-rouge">power(mW/dBm)2(dBm/mW) &lt;value&gt;</code></h4> <p>This command also support other scale of watt, and the user can replace <code class="language-plaintext highlighter-rouge">mW</code> to <code class="language-plaintext highlighter-rouge">W</code>, <code class="language-plaintext highlighter-rouge">uW</code>, etc.</p> <p>For example, convert 3 dBm to mW, the command is <code class="language-plaintext highlighter-rouge">powerdBm2mW 3</code>.</p> <p>Likewise, <code class="language-plaintext highlighter-rouge">powermW2dBm 3</code> means convert 3 mW to dBm.</p> <h4 id="14-decibel-and-linear-scale-converstion-lin2db-value">1.4 Decibel and linear scale converstion: <code class="language-plaintext highlighter-rouge">lin2dB &lt;value&gt;</code></h4> <p>For example, convert factor-4 linear scale to dB, the command is <code class="language-plaintext highlighter-rouge">lin2dB 4</code>.</p> <p>Likewise, <code class="language-plaintext highlighter-rouge">dB2lin 3</code> means convert 3 dB to linear scale.</p> <h4 id="15-photon-energy-and-frequencywavelength-photonfreqfreq_unit2eenergy_unit-freq_value-or-photonwlwl_unit2eenergy_unit-wl_value">1.5 Photon energy and frequency/wavelength: <code class="language-plaintext highlighter-rouge">photonfreq(freq_unit)2E(energy_unit) &lt;freq_value&gt;</code> or <code class="language-plaintext highlighter-rouge">photonwl(wl_unit)2E(energy_unit) &lt;wl_value&gt;</code></h4> <p>For photon energy, one can use either <code class="language-plaintext highlighter-rouge">*J</code> (like <code class="language-plaintext highlighter-rouge">mJ</code>, <code class="language-plaintext highlighter-rouge">uJ</code>, etc) or <code class="language-plaintext highlighter-rouge">eV</code>.</p> <p>For back-conversion, the cammand is similar: <code class="language-plaintext highlighter-rouge">photonfreq(freq_unit)2E(energy_unit) &lt;freq_value&gt;</code> or <code class="language-plaintext highlighter-rouge">photonwl(wl_unit)2E(energy_unit) &lt;wl_value&gt;</code>.</p> <p>For angular frequency, replace <code class="language-plaintext highlighter-rouge">freq</code> by <code class="language-plaintext highlighter-rouge">afreq</code>, and the units are omitted (default: rad/s)</p> <h4 id="16-energy-conversion-between-j-and-ev-energyev2energy_unit-value-and-energyenergy_unit2ev-value">1.6 Energy conversion between *J and eV: <code class="language-plaintext highlighter-rouge">energyeV2(energy_unit) &lt;value&gt;</code> and <code class="language-plaintext highlighter-rouge">energy(energy_unit)2eV &lt;value&gt;</code></h4> <p><code class="language-plaintext highlighter-rouge">energyeV2J &lt;value&gt;</code> converts eV to J, and <code class="language-plaintext highlighter-rouge">energymJ2eV &lt;value&gt;</code> converts mJ to eV.</p> <h3 id="2-flexicommand-value-1-value-2">2. <code class="language-plaintext highlighter-rouge">flexiCommand &lt;value-1&gt; &lt;value-2&gt;</code></h3> <h4 id="21-difference-in-frequencywavelength-to-difference-in-wavelengthfrequency">2.1 Difference in frequency/wavelength to difference in wavelength/frequency:</h4> <p>There are two scenarios.</p> <ul> <li>Known 2 freqeuncies/wavelengths and want difference in wavelength/frequency (e.g., for given $f_1$ and $f_2$, ask for $\Delta \lambda$): <code class="language-plaintext highlighter-rouge">dfreq(freq_unit)2dwl(wl_unit) &lt;freq1&gt; &lt;freq2&gt;</code> or <code class="language-plaintext highlighter-rouge">dwl(wl_unit)2dfreq(freq_unit) &lt;wl1&gt; &lt;wl2&gt;</code>, for example <code class="language-plaintext highlighter-rouge">dwlnm2dfreqTHz 1540 1545</code></li> <li>Known the interval frequency/wavelength and bands (centre frequency/wavelength), and want difference in the other domain: <ul> <li><code class="language-plaintext highlighter-rouge">dfreq(freq_unit)2dwl(wl_unit)@wl &lt;dfreq&gt; &lt;wl_central&gt;</code> (for given $\Delta f$ near $\lambda_c$, ask for $\Delta \lambda$)</li> <li><code class="language-plaintext highlighter-rouge">dfreq(freq_unit)2dwl(wl_unit)@freq &lt;dfreq&gt; &lt;freq_central&gt;</code> (for given $\Delta f$ near $f_c$, ask for $\Delta \lambda$)</li> <li><code class="language-plaintext highlighter-rouge">dwl(wl_unit)2dfreq(freq_unit)@wl &lt;dfreq&gt; &lt;wl_central&gt;</code> (for given $\Delta \lambda$ near $\lambda_c$, ask for $\Delta f$)</li> <li><code class="language-plaintext highlighter-rouge">dwl(wl_unit)2dfreq(freq_unit)@freq &lt;dfreq&gt; &lt;freq_central&gt;</code> (for given $\Delta \lambda$ near $f_c$, ask for $\Delta f$)</li> </ul> </li> </ul> <p>The centre frequency/wavelength should be in the same unit as (freq_unit) or (wl_unit).</p> <h4 id="22-wavenumber-from-wavelengthfrequencyangular-frequency-wlwl_unit2wn-n-wl_value--freqfreq_unit2wn-n-value--afreq2wn-n-value">2.2 Wavenumber from wavelength/frequency/angular frequency: <code class="language-plaintext highlighter-rouge">wl(wl_unit)2wn &lt;n&gt; &lt;wl_value&gt;</code> / <code class="language-plaintext highlighter-rouge">freq(freq_unit)2wn &lt;n&gt; &lt;value&gt;</code> / <code class="language-plaintext highlighter-rouge">afreq2wn &lt;n&gt; &lt;value&gt;</code></h4> <p>For angular frequency, only rad/s is supported. For vacuum, input <code class="language-plaintext highlighter-rouge">n</code> as 1.</p> <h4 id="23-cavity-free-spectral-range-fsr-cavcavlength_unit2freqfreq_unit-n_cav-length_cav--cavcavlength_unit2tperiod_unit-n_cav-length_cav">2.3 Cavity free spectral range (FSR): <code class="language-plaintext highlighter-rouge">cav(cavlength_unit)2freq(freq_unit) &lt;n_cav&gt; &lt;length_cav&gt;</code> / <code class="language-plaintext highlighter-rouge">cav(cavlength_unit)2t(period_unit) &lt;n_cav&gt; &lt;length_cav&gt;</code></h4> <p>Calculates the FSR in freqeucny/time/wavelength intervals in the selected domains and units. For vacuum, input <code class="language-plaintext highlighter-rouge">n</code> as 1.</p> <h4 id="24-cavity-length-from-fsr-freqfreq_unit2cavcavlength_unit-n_cav-freq--tperiod_unit2cavcavlength_unit-n_cav-t">2.4 Cavity length from FSR: <code class="language-plaintext highlighter-rouge">freq(freq_unit)2cav(cavlength_unit) &lt;n_cav&gt; &lt;freq&gt;</code> / <code class="language-plaintext highlighter-rouge">t(period_unit)2cav(cavlength_unit) &lt;n_cav&gt; &lt;t&gt;</code></h4> <p>Calculates the cavity length from FSR.</p> <h3 id="3-flexicommand-value-1-value-2-value-3">3. <code class="language-plaintext highlighter-rouge">flexiCommand &lt;value-1&gt; &lt;value-2&gt; &lt;value-3&gt;</code></h3> <h4 id="31-fresnel-reflection-reflectdeg-n1-n2-angle_deg-or-reflectrad-n1-n2-angle_rad">3.1 Fresnel reflection: <code class="language-plaintext highlighter-rouge">reflectDEG &lt;n1&gt; &lt;n2&gt; &lt;angle_DEG&gt;</code> or <code class="language-plaintext highlighter-rouge">reflectRAD &lt;n1&gt; &lt;n2&gt; &lt;angle_RAD&gt;</code></h4> <p>For example <code class="language-plaintext highlighter-rouge">reflectDEG 1.2 1.6 0</code> and <code class="language-plaintext highlighter-rouge">reflectRAD 1.2 1.6 0</code> do the same thing.</p> <p><code class="language-plaintext highlighter-rouge">n1</code> and <code class="language-plaintext highlighter-rouge">n2</code> are refractive indices of the two media, <code class="language-plaintext highlighter-rouge">angle</code> is the incident angle. There are three outputs, $R_s$ and $R_p$ in two polarizations and their average $R_{avg}$.</p> <p><code class="language-plaintext highlighter-rouge">reflectDEG</code> treats incident angle in degree, and <code class="language-plaintext highlighter-rouge">reflectRAD</code> treats incident angle in radian.</p> <h4 id="32-peak-power-and-average-power-of-pulsed-laser-peak2pavgintensity_unittemporal_unitreprate_unit-p_peak-t_pulse-reprate-or-pavg2peakintensity_unittemporal_unitreprate_unit-p_avg-t_pulse-reprate">3.2 Peak power and average power of pulsed laser. <code class="language-plaintext highlighter-rouge">peak2pavg(intensity_unit)(temporal_unit)(reprate_unit) &lt;P_peak&gt; &lt;t_pulse&gt; &lt;reprate&gt;</code> or <code class="language-plaintext highlighter-rouge">pavg2peak(intensity_unit)(temporal_unit)(reprate_unit) &lt;P_avg&gt; &lt;t_pulse&gt; &lt;reprate&gt;</code></h4> <p>(intensity_unit) is optional (can be omitted) and kept consistent throughout input and output.</p> <p>Temporal width in time (<code class="language-plaintext highlighter-rouge">*s</code>), repetition rate in frequency (<code class="language-plaintext highlighter-rouge">*Hz</code>).</p> <p>For example, <code class="language-plaintext highlighter-rouge">peak2pavgGWpsMHz 0.5 1 16</code> means the input has a peak power of 0.5 GW/unit_area, 1-ps temporal width, and 16-MHz repetition rate. If <code class="language-plaintext highlighter-rouge">GHz</code> is omitted, the unit will become (a.u.)/unit_area.</p> <h2 id="reserved-words">Reserved words:</h2> <ul> <li>2 - to (in between two variables in a command)</li> <li>afreq - angluar frequency</li> <li>cav - cavity (length)</li> <li>dfreq - difference in frequency</li> <li>dwl - difference in wavelength</li> <li>energy - convert energy units</li> <li>freq - frequency</li> <li>lin - linear scale (dimensionless)</li> <li>pavg - average power</li> <li>peak - peak power</li> <li>photon - convert photon energy</li> <li>power - power or intensity</li> <li>reflect - reflection</li> <li>t - time (interval)</li> <li>wn - wavenumber / propagation constant</li> <li>wl - wavelength</li> </ul> <h2 id="supported-units">Supported units:</h2> <ul> <li><strong>angular frequency:</strong> rad/s</li> <li><strong>angles:</strong> DEG, RAD</li> <li><strong>frequency:</strong> *Hz (Hz to THz)</li> <li><strong>linear energy/power:</strong> dimensionless or *W (fW to GW) or *W/cm^2 (in pulsed laser)</li> <li><strong>logarithmic scale:</strong> dB, dBm</li> <li><strong>photon energy:</strong> *J (fJ to GJ), eV</li> <li><strong>wavelength/cavity length:</strong> *m (am to Gm)</li> </ul>]]></content><author><name></name></author><category term="academic tool"/><category term="free software"/><category term="github"/><category term="optics and photonics"/><category term="unit conversion"/><summary type="html"><![CDATA[QUICKphotonics (Quick UnIt Conversion Kit for Photonics) is a MATLAB-powered, commandline-style, lightweight and modular (expandable framework) tool for unit conversion in optics and photonics. It is currently a proprietary software maintained by Jiaye Wu and distributed under the MIT license.]]></summary></entry><entry><title type="html">Blog Post in Spring-Nature Research Communities</title><link href="https://jiaye-wu.github.io/2024-Nature-Community/" rel="alternate" type="text/html" title="Blog Post in Spring-Nature Research Communities"/><published>2024-02-18T00:00:00+00:00</published><updated>2024-02-18T00:00:00+00:00</updated><id>https://jiaye-wu.github.io/blog-post</id><content type="html" xml:base="https://jiaye-wu.github.io/2024-Nature-Community/"><![CDATA[<p>Following the publishing of our recent work at <em>Nature Communications</em> entitled <a href="https://www.nature.com/articles/s41467-024-45054-z">Thermo-optic epsilon-near-zero effects</a>, Springer-Nature invited us to write a behind-the-paper blog post, which is a version of the research for the general public.</p> <p>Read the post here: <a href="https://communities.springernature.com/posts/towards-photonic-on-chip-integration-strong-linear-and-nonlinear-thermo-optic-effects-enhanced-by-near-zero-permittivity-on-a-nanolayer">Towards photonic on-chip integration: Strong linear and nonlinear thermo-optic effects enhanced by near-zero permittivity on a nanolayer</a>.</p>]]></content><author><name></name></author><category term="academic paper"/><category term="nature communications"/><category term="epsilon-near-zero photonics"/><category term="Spring-Nature Research Communities"/><category term="blog post"/><summary type="html"><![CDATA[Following the publishing of our recent work at Nature Communications entitled Thermo-optic epsilon-near-zero effects, Springer-Nature invited us to write a behind-the-paper blog post, which is a version of the research for the general public.]]></summary></entry><entry><title type="html">Archive of Useful Academic Software: Mendeley Desktop</title><link href="https://jiaye-wu.github.io/2023-Mendeley-Desktop/" rel="alternate" type="text/html" title="Archive of Useful Academic Software: Mendeley Desktop"/><published>2023-02-18T00:00:00+00:00</published><updated>2023-02-18T00:00:00+00:00</updated><id>https://jiaye-wu.github.io/blog-post</id><content type="html" xml:base="https://jiaye-wu.github.io/2023-Mendeley-Desktop/"><![CDATA[<p>As <a href="https://www.mendeley.com/">Mendeley</a> decided to retire their reference management tool <strong>Mendeley Desktop</strong> and replace it with the immature <a href="https://www.mendeley.com/reference-management/reference-manager">Mendeley Reference Manager</a> that is missing many important functions, more and more users complain about its user-unfriendly-ness (For example, see discussions on <a href="https://www.reddit.com/r/Mendeley/comments/10gfzoq/mendeley_reference_manager_is_a_horrible_program/">Reddit</a>). I also have an answer below a <a href="https://www.zhihu.com/question/380051419/answer/1508753929">Zhihu</a> question sharing the archive of old Mendeley desktop installers that received a large amount of likes.</p> <p>I am sharing the old installers for free as an internet archive, hosted in my Github repository. Please keep in mind that the copyright belongs to Mendeley, and I hold no responsibility for data lost or any damage caused by incorrect installation.</p> <h1 id="microsoft-windows-x86x64">Microsoft Windows (X86/X64)</h1> <p><a href="https://jiaye-wu.github.io/files/Mendeley-Desktop-1.19.8-win32.exe">Mendeley Desktop 1.19.8</a></p> <h1 id="apple-macos-x86x64">Apple macOS (X86/X64)</h1> <p><a href="https://jiaye-wu.github.io/files/Mendeley-Desktop-1.19.2-OSX-Universal.dmg">Mendeley Desktop 1.19.2</a></p> <h1 id="gnulinux-debian-packages-x86x64">GNU/Linux: Debian packages (X86/X64)</h1> <p>Unzip in the same folder:</p> <p>Mendeley Desktop 1.19.8 original official version <a href="https://jiaye-wu.github.io/files/mendeleydesktop_1.19.8-stable_amd64.zip">Part 1</a> <a href="https://jiaye-wu.github.io/files/mendeleydesktop_1.19.8-stable_amd64.z01">Part 2</a> <a href="https://jiaye-wu.github.io/files/mendeleydesktop_1.19.8-stable_amd64.z02">Part 3</a></p> <p>Mendeley Desktop 1.19.8 modified for dependencies in Ubuntu 22.04+ <a href="https://jiaye-wu.github.io/files/mendeleydesktop_1.19.8_for_ubuntu_22.04.zip">Part 1</a> <a href="https://jiaye-wu.github.io/files/mendeleydesktop_1.19.8_for_ubuntu_22.04.z01">Part 2</a> <a href="https://jiaye-wu.github.io/files/mendeleydesktop_1.19.8_for_ubuntu_22.04.z02">Part 3</a></p>]]></content><author><name></name></author><category term="academic tool"/><category term="mendeley desktop"/><category term="mendeley"/><category term="reference manager"/><category term="litreature management tool"/><summary type="html"><![CDATA[As Mendeley decided to retire their reference management tool Mendeley Desktop and replace it with the immature Mendeley Reference Manager that is missing many important functions, more and more users complain about its user-unfriendly-ness (For example, see discussions on Reddit). I also have an answer below a Zhihu question sharing the archive of old Mendeley desktop installers that received a large amount of likes.]]></summary></entry><entry><title type="html">Milestone: My First Experimental &amp;amp; Cross-Disciplinary Research</title><link href="https://jiaye-wu.github.io/2021-Milestone-First-Experiment/" rel="alternate" type="text/html" title="Milestone: My First Experimental &amp;amp; Cross-Disciplinary Research"/><published>2021-08-05T00:00:00+00:00</published><updated>2021-08-05T00:00:00+00:00</updated><id>https://jiaye-wu.github.io/blog-post</id><content type="html" xml:base="https://jiaye-wu.github.io/2021-Milestone-First-Experiment/"><![CDATA[<p>We introduce supercritical fluid (SCF) technology to epsilon-near-zero (ENZ) photonics for the first time and experimentally demonstrate the manipulation of the ENZ wavelength for the enhancement of linear and nonlinear optical absorption in ENZ indium tin oxide (ITO) nanolayer. Inspired by the SCF’s applications in repairing defects, reconnecting bonds, introducing dopants, and boosting the performance of microelectronic devices, here, this technique is used to exploit the influence of the electronic properties on optical characteristics. By reducing oxygen vacancies and electron scattering in the SCF oxidation process, the ENZ wavelength is shifted by 23.25 nm, the intrinsic loss is reduced by 20%, and the saturable absorption modulation depth is enhanced by &gt; 30%. The proposed technique offers a time-saving low-temperature technique to optimize the linear and nonlinear absorption performance of plasmonics-based ENZ nanophotonic devices.</p> <h1 id="cited-as">Cited as</h1> <p>J. Wu, et al., “Manipulation of epsilon-near-zero wavelength for the optimization of linear and nonlinear absorption by supercritical fluid”, <em>Scientific Reports</em> <strong>11</strong>(1): 15936, 2021.</p> <h1 id="links">Links</h1> <ul> <li><a href="https://doi.org/10.1038/s41598-021-95513-6">DOI</a></li> <li><a href="https://www.nature.com/articles/s41598-021-95513-6">nature.com</a></li> </ul>]]></content><author><name></name></author><category term="epsilon-near-zero"/><category term="plasmonics"/><category term="supercritical fluid"/><category term="ellipsometry"/><category term="microelectronics"/><summary type="html"><![CDATA[We introduce supercritical fluid (SCF) technology to epsilon-near-zero (ENZ) photonics for the first time and experimentally demonstrate the manipulation of the ENZ wavelength for the enhancement of linear and nonlinear optical absorption in ENZ indium tin oxide (ITO) nanolayer. Inspired by the SCF’s applications in repairing defects, reconnecting bonds, introducing dopants, and boosting the performance of microelectronic devices, here, this technique is used to exploit the influence of the electronic properties on optical characteristics. By reducing oxygen vacancies and electron scattering in the SCF oxidation process, the ENZ wavelength is shifted by 23.25 nm, the intrinsic loss is reduced by 20%, and the saturable absorption modulation depth is enhanced by &gt; 30%. The proposed technique offers a time-saving low-temperature technique to optimize the linear and nonlinear absorption performance of plasmonics-based ENZ nanophotonic devices.]]></summary></entry><entry><title type="html">Academic Tool: SSPROP-NFOL Project</title><link href="https://jiaye-wu.github.io/2018-SSPROP-NFOL/" rel="alternate" type="text/html" title="Academic Tool: SSPROP-NFOL Project"/><published>2018-04-08T00:00:00+00:00</published><updated>2018-04-08T00:00:00+00:00</updated><id>https://jiaye-wu.github.io/blog-post</id><content type="html" xml:base="https://jiaye-wu.github.io/2018-SSPROP-NFOL/"><![CDATA[<p>An enhanced open source MATLAB project for general-purpose symmetrized split-step software.</p> <h1 id="ssprop-nfol">SSPROP-NFOL</h1> <p><a href="https://github.com/jiaye-wu/SSPROP-NFOL">SSPROP-NFOL</a> is the enhanced Windows AMD64/X64 (compiled) distribution of SSPROP, maintained and personally used by the author.</p> <p>SSPROP-NFOL is also a general-purpose symmetrized split-step software routine that can be invoked directly from Matlab to solve the nonlinear Schrödinger equation. It guarantees the same efficiency as SSPROP originally by Photonics Research Laboratory, Maryland University (https://www.photonics.umd.edu/software/ssprop/).</p> <p>SSPROP-NFOL is a <strong>ready-to-use SSPROP distribution</strong> compiled for <strong>Windows 10 64-Bit PCs/Tablets</strong> and <strong>newer MATLAB 64-Bit versions above 7.5</strong> (test environment MATLAB 64-Bit 9.1.0.441655 R2016b, Windows 10 Spring Creator Update 1803) <strong>along with many exclusive new features and useful functions</strong>. It is ready to use right out-of-the-box. It provides propagation algorithm command using <em>MATLAB MEXW64</em> and supports <em>intrapulse Raman scattering</em> &amp; <em>self-steepening effect</em>. Other improvements can be found in Changelog.txt.</p> <p>SSPROP-NFOL is an open-source software under GPL v3.</p> <h1 id="ssprop-nfol-democode">SSPROP-NFOL-DemoCode</h1> <p><a href="https://github.com/jiaye-wu/SSPROP-NFOL-DemoCode">SSPROP-NFOL-DemoCode</a> repository shows how to utilize SSPROP-NFOL project. The demo codes reproduce many of the numerical results that are presented in Chapter 3 to Chapter 5 in Govind. P. Agrawal’s book, “Nonlinear Fiber Optics”, 5th Edition.</p> <p>SSPROP-NFOL-DemoCode are licensed under <strong>Apache License 2.0</strong> along with <strong>“Additional Term of Use”</strong> (https://github.com/jiaye-wu/SSPROP-NFOL-DemoCode/blob/master/README.md). <strong>Please follow these reqirement is you use it in your scientific researches</strong>.</p> <h1 id="authors">Authors</h1> <p>The <strong>original version of SSPROP</strong> is by Photonics Research Laboratory, Maryland University (https://www.photonics.umd.edu/software/ssprop/).</p> <p>The <strong>SSPROP-NFOL</strong> is maintained by jiaye-wu (https://github.com/jiaye-wu/SSPROP-NFOL), which is in the master branch.</p> <p>The <strong>SSPROP-NFOL-DemoCode</strong> is maintained by jiaye-wu (https://github.com/jiaye-wu/SSPROP-NFOL-DemoCode).</p> <h1 id="citation--reference">Citation &amp; Reference</h1> <p>The author of SSPROP-NFOL kindly asks you to cite the following works if either SSPROP-NFOL or SSPROP-NFOL-Examples has helped you accomplish scientific researches and publish papers. Please refer to the author’s academic profile and select relevant works to cite.</p> <p>https://www.researchgate.net/profile/Jiaye_Wu</p> <p>https://scholar.google.com/citations?user=D2n8tswAAAAJ</p> <h1 id="about-the-original-ssprop">About the original SSPROP</h1> <p>One of the most fundamental equations in optical communications is the nonlinear Schrödinger equation, which governs the propagation of optical signals in dispersive, nonlinear fibers. Unfortunately, in all but a few special cases, the nonlinear Schrödinger equation does not have analytic solutions, and must be solved numerically.</p> <p>SSPROP is a general-purpose symmetrized split-step software routine that can be invoked directly from Matlab to solve the nonlinear Schrödinger equation. Unlike conventional Matlab scripts that are interpreted at runtime, SSPROP is a compiled program written in C that can be called directly from Matlab. It therefore retains the speed and efficiency of compiled program, while allowing access to the full range of Matlab graphing and vector manipulation routines. Benchmark tests show that the program is up to 10-20x faster than an equivalent Matlab m-file script that performs the same calculations.</p> <p>Original project is licensed under GPL v2. (https://www.photonics.umd.edu/software/ssprop/)</p> <h1 id="installation-and-implementation">Installation and Implementation</h1> <p>Download the repository and place it in a fixed path on local drive, name it as you like. However, in order to avoid potential glitches, please do not use Chinese characters (neither Simplified nor Traditional) or any space within the path. (recommendation: use this_is_an_example instead of “this is an example”).</p> <p>Then include this folder but <strong>NOT</strong> its sub-folders, into the MATLAB path settings. If you included the sub-folders, conflicts might occur. If you would like to use dll legacy support for Windows or mexglx support for Linux, just copy those files into the root folder.</p> <p>If “invalid error” occurs while calling the mexw64 function, run the following lines and they will remain effective during the whole session until MATLAB is closed:</p> <p><code class="language-plaintext highlighter-rouge">warning off</code></p> <p><code class="language-plaintext highlighter-rouge">loadlibrary('libfftw3-3.dll','libfftw3.h')</code></p> <p><code class="language-plaintext highlighter-rouge">warning on</code></p> <h1 id="ssprop-nfol-vector-sspropvcmexw64">SSPROP-NFOL Vector sspropvc.mexw64</h1> <p>The vector version of the SSPROP-NFOL (sspropvc.mexw64) solves the coupled nonlinear Schrödinger equations for propagation in a birefringent fiber. The code can model birefringence, differential group delay (PMD), polarization-dependent dispersion, and polarization dependent loss, all in the context of nonlinear propagation.</p> <p>The user may choose from two different algorithms, depending on whether the birefringent beat length is shorter or longer than the nonlinear length.</p> <p>The compiled mex file (sspropvc.mexw64) can be invoked from Matlab using one of the following forms:</p> <p><code class="language-plaintext highlighter-rouge">u1 = sspropvc(u0x,u0y,dt,dz,nz,alphaa,alphab,betapa,betapb,gamma);</code></p> <p><code class="language-plaintext highlighter-rouge">u1 = sspropvc(u0x,u0y,dt,dz,nz,alphaa,alphab,betapa,betapb,gamma,psp,method);</code></p> <p><code class="language-plaintext highlighter-rouge">u1 = sspropvc(u0x,u0y,dt,dz,nz,alphaa,alphab,betapa,betapb,gamma,psp,method,maxiter);</code></p> <p><code class="language-plaintext highlighter-rouge">u1 = sspropvc(u0x,u0y,dt,dz,nz,alphaa,alphab,betapa,betapb,gamma,psp,method,maxiter,tol);</code></p> <p>The last four arguments assume a default value if they are left unspecified.</p> <table> <tbody> <tr> <td><em>u0x, u0y</em>, vector (N), Input optical field, specified by two length-N vector time sequences. u0x represents the x-component of the complex, slowly-varying envelope of the optical field, and u0y represents the corresponding y-component. The fields should be normalized so that</td> <td>u0x</td> <td>^2 +</td> <td>u0y</td> <td>^2 is the optical power.</td> </tr> </tbody> </table> <p><em>dt</em>, scalar, The time increment between adjacent points in the vector u0.</p> <p><em>dz</em>, scalar, The step-size to use for propagation</p> <p><em>nz</em>, scalar (int), The number of steps to take. The total distance propagated is therefore L = nz*dz</p> <p><em>alphaa, alphab</em>, scalar or vector (N), The linear power attenuation coefficients for the two eigenstates of the fiber. Here we use the labels “a” and “b” to denote the two eigenstates, which need not coincide with the x-y axes. Polarization dependent loss is modeled by using different numbers for alphaa and alphab.The loss coefficient may optionally be specified as a vector of the same length as u0x, in which case it will be treated as vector that describes a wavelength-dependent loss coefficient α(ω) in the frequency domain. (The function wspace.m can be used to construct a vector with the corresponding frequencies.)</p> <p><em>betapa, betapb</em>, vector, Real-valued vectors that specify the dispersion for each eigenstate (a, b) of the fiber. The dispersion can be specified to any polynomial order by using a betap vector of the appropriate length.Birefringence is accomodated by making the first elements betapa(1) and betapb(1) unequal. Differential group delay, or polarization mode dispersion is likewise treated by making the second elements betapa(2) and betapb(2) different. (See note below for a more complete discussion.)The propagation constant can also be specified directly by replacing the polynomial argument betap with a vector of the same length as u0x. In this case, the argument betap is treated as a vector describing propagation constant β(ω) in the frequency domain. (The function wspace.m can be used to construct a vector with the corresponding frequencies.)</p> <p><em>gamma</em>, scalar, A real number that describes the nonlinear coefficient of the fiber, which is related to the mode effective area and the nonlinear refractive index n2.</p> <p><em>psp</em>, scalar or vector (2), Principal eigenstate of the fiber, specified as a 2-vector containing the angles ψ and χ (see discussion above), psp = [ψ ,χ].If psp is a scalar, it is interpreted to be ψ, and χ is then taken to be zero. This corresponds to a linearly-birefringent fiber whose axes are oriented at an angle χ with respect to the x-y axes.If psp is left completely unspecified, it assumes a default value of [0,0], which means that the fiber eigenstates are linearly polarized along the x- and y- directions.</p> <p><em>method</em>, string, String that specifies which method to use when performing the split-step calculations. The following methods are recognized “elliptical” or “circular”.When method = “elliptical”, sspropv will solve the equations by decomposing the input field into the (in general) elliptical eigenstates of the fiber. This method is appropriate only in fibers where the birefringent beat length is much shorter than the nonlinear length.When method = “circular”, sspropv will instead solve the equations by decomposing the input field into a right- and left-circular basis. This method is more accurate, but requires that the step size be small compared to the beat length.</p> <p><em>maxiter</em>, scalar (int), The maximum number of iterations to make per step. If the solution does not converge to the desired tolerance within this number of iterations, a warning message will be generated. Usually this means that the chosen stepsize was too small. (default = 4)</p> <p><em>tol</em>, scalar, Convergence tolerance: controls to what level the solution must converge when performing the symmetrized split-step iterations in each step. (default = 10–5.)</p> <p>The parameter definations are the same with original SSPROP, ref: by Photonics Research Lab, Maryland University https://www.photonics.umd.edu/software/ssprop/vector-version/</p> <h1 id="ssprop-nfol-scalar-sspropcmexw64">SSPROP-NFOL Scalar sspropc.mexw64</h1> <p>The scalar version of the SSPROP solves the scalar nonlinear Schrödinger equation using the symmetrized split-step Fourier method. It allows for almost arbitrary specification of the dispersion and loss, and it includes a simple approximation for the <em>intrapulse Raman response time</em> and the <em>optical self-steepening effect</em>.</p> <p>The compiled mex file (sspropc.mexw64) can be invoked from Matlab using one of the following forms:</p> <p><code class="language-plaintext highlighter-rouge">u1 = sspropc(u0,dt,dz,nz,alpha,betap,gamma);</code></p> <p><code class="language-plaintext highlighter-rouge">u1 = sspropc(u0,dt,dz,nz,alpha,betap,gamma,tr);</code></p> <p><code class="language-plaintext highlighter-rouge">u1 = sspropc(u0,dt,dz,nz,alpha,betap,gamma,tr,to);</code></p> <p><code class="language-plaintext highlighter-rouge">u1 = sspropc(u0,dt,dz,nz,alpha,betap,gamma,tr,to,maxiter);</code></p> <p><code class="language-plaintext highlighter-rouge">u1 = sspropc(u0,dt,dz,nz,alpha,betap,gamma,tr,to,maxiter,tol);</code></p> <p>The last three arguments assume a default value if they are left unspecified.</p> <p>sspropc may also be invoked with a single input argument, to specify options specific to the FFTW routines:</p> <p><code class="language-plaintext highlighter-rouge">sspropc -option</code></p> <table> <tbody> <tr> <td><em>u0</em>, vector (N), Input optical field, specified as a length-N vector time sequence. u0 represents the complex, slowly-varying envelope of the optical field. u0 should be normalized so that</td> <td>u0</td> <td>^2 is the optical power.</td> </tr> </tbody> </table> <p><em>dt</em>, scalar, The time increment between adjacent points in the vector u0.</p> <p><em>dz</em>, scalar, The step-size to use for propagation</p> <p><em>nz</em>, scalar (int), The number of steps to take. The total distance propagated is therefore L = nz*dz</p> <p><em>alpha</em>, scalar or vector (N), The linear power attenuation coefficient. Specifically, if the medium is excited with CW light, the power should fall with distance according to P(z) = P(0)exp(-α<em>z). Note: this implies that the fields decay as exp(-α</em>z/2).The loss coefficient alpha may optionally be specified as a vector of the same length as u0, in which case it is treated as vector that describes a wavelength-dependent loss coefficient α(ω) in the frequency domain. (The function wspace.m can be used to construct a vector with the corresponding frequencies.)</p> <p><em>betap</em>, vector, A real-valued vector specifying the dispersion properties of the medium. The dispersion can be specified to any polynomial order by using a betap vector with the appropriate length. In most cases the nonlinear Schrödinger equation is solved with a slowly-varing envelope approximation in a reference frame that is moving at the group velocity. In this case, the first two elements of the betap vector (β0 and β1) should be set to zero. The first non-zero term, betap(3), would then represent β2, the group-velocity dispersion.The propagation constant can also be specified directly by replacing the polynomial argument betap with a vector of the same length as u0. In this case, the argument betap is treated as a vector describing propagation constant β(ω) in the frequency domain. (The function wspace.m can be used to construct a vector with the corresponding frequencies.)</p> <p><em>gamma</em>, scalar, A real number that describes the nonlinear coefficient of the fiber, which is related to the mode effective area and the nonlinear refractive index n2.</p> <p><em>tr</em>, scalar, The Raman response time. (default = 0)</p> <p><em>t0</em>, scalar, The optical cycle time (= 1/f). (default = 0)</p> <p><em>maxiter</em>, scalar (int), The maximum number of iterations to make per step. If the solution does not converge to the desired tolerance within this number of iterations, a warning message will be generated. Usually this means that the chosen stepsize was too small. (default = 4)</p> <p><em>tol</em>, scalar, Convergence tolerance: controls to what level the solution must converge when performing the symmetrized split-step iterations in each step. (default = 10–5.)</p> <p>The parameter definations are the same with original SSPROP, ref: by Photonics Research Lab, Maryland University https://www.photonics.umd.edu/software/ssprop/scalar-version/</p> <h1 id="pulse-generation">Pulse Generation</h1> <p><strong>Gaussian Pulse</strong></p> <p><code class="language-plaintext highlighter-rouge">u = gaussian (t);</code></p> <p><code class="language-plaintext highlighter-rouge">u = gaussian (t,tc);</code></p> <p><code class="language-plaintext highlighter-rouge">u = gaussian (t,tc,T0);</code></p> <p><code class="language-plaintext highlighter-rouge">u = gaussian (t,tc,T0,P0);</code></p> <p><code class="language-plaintext highlighter-rouge">u = gaussian (t,tc,T0,P0,m);</code></p> <p><code class="language-plaintext highlighter-rouge">u = gaussian (t,tc,T0,P0,m,C);</code></p> <p><em>t</em>     vector of times at which to compute u</p> <p><em>tc</em>   center of pulse (default = 0)</p> <p><em>T0</em> half width at 1/e intensity of pulse (default = 1)</p> <table> <tbody> <tr> <td><em>P0</em>   peak intensity (</td> <td>u</td> <td>^2 at t=t0) of pulse (default = 1)</td> </tr> </tbody> </table> <p><em>m</em>     Gaussian order (default = 1)</p> <p><em>C</em>     chirp parameter (default = 0)</p> <p><strong>Sech Pulse</strong></p> <p><code class="language-plaintext highlighter-rouge">u = sechpulse (t);</code></p> <p><code class="language-plaintext highlighter-rouge">u = sechpulse (t,tc);</code></p> <p><code class="language-plaintext highlighter-rouge">u = sechpulse (t,tc,T0);</code></p> <p><code class="language-plaintext highlighter-rouge">u = sechpulse (t,tc,T0,P0);</code></p> <p><code class="language-plaintext highlighter-rouge">u = sechpulse (t,tc,T0,P0,C);</code></p> <p><em>t</em> vector of times at which to compute u</p> <p><em>tc</em> center of pulse (default = 0)</p> <p><em>T0</em> half width at 1/e intensity of pulse (default = 1)</p> <table> <tbody> <tr> <td><em>P0</em> peak intensity (</td> <td>u</td> <td>^2 at t=t0) of pulse (default = 1)</td> </tr> </tbody> </table> <p><em>C</em> chirp parameter (default = 0)</p> <p><strong>Soliton Pulse</strong></p> <p><code class="language-plaintext highlighter-rouge">u = solitonpulse (t);</code></p> <p><code class="language-plaintext highlighter-rouge">u = solitonpulse (t,tc);</code></p> <p><code class="language-plaintext highlighter-rouge">u = solitonpulse (t,tc,epsilon);</code></p> <p><code class="language-plaintext highlighter-rouge">u = solitonpulse (t,tc,epsilon,N);</code></p> <p><em>t</em> vector of times at which to compute u</p> <p><em>tc</em> center of pulse (default = 0)</p> <p><em>epsilon</em> scale factor for solition (default = 1), note: make epsilon=2*acosh(sqrt(2)) to get FWHM = 1</p> <p><em>N</em> soliton order (default = 1)</p>]]></content><author><name></name></author><category term="academic tool"/><category term="open source"/><category term="github"/><category term="nonlinear optics"/><category term="split-step Fourier method"/><summary type="html"><![CDATA[An enhanced open source MATLAB project for general-purpose symmetrized split-step software.]]></summary></entry><entry><title type="html">Milestone: My First Research Paper</title><link href="https://jiaye-wu.github.io/2017-Milestone-First-Paper/" rel="alternate" type="text/html" title="Milestone: My First Research Paper"/><published>2017-09-10T00:00:00+00:00</published><updated>2017-09-10T00:00:00+00:00</updated><id>https://jiaye-wu.github.io/blog-post</id><content type="html" xml:base="https://jiaye-wu.github.io/2017-Milestone-First-Paper/"><![CDATA[<p>In this paper, an optical radiative cooler with quasi-Cantor structure is theoretically proposed and analyzed. This simple and symmetrically designed optical structure operates upon continuous thermal sources in diurnal subtropical conditions, and its efficiency is much higher than natural cooling, for instance, when operating upon a typical 323.15 K continuous thermal source with a wind speed at 3 m/s, it can generate a net cooling power of 363.68 W/m², which is 18.26% higher than that of non-radiative heat exchange (natural cooling) under the same conditions. Additionally, several aspects are considered in its design to ensure a low cost in application, which is of great economical and environmental significance.</p> <h1 id="cited-as">Cited as</h1> <p>J.-Y. Wu, et al., “Diurnal cooling for continuous thermal sources under direct subtropical sunlight produced by quasi-Cantor structure”, <em>Chinese Physics B</em> <strong>26</strong>(10): 104201, 2017.</p> <h1 id="links">Links</h1> <ul> <li><a href="https://doi.org/10.1088/1674-1056/26/10/104201">DOI</a></li> <li><a href="https://cpb.iphy.ac.cn/EN/10.1088/1674-1056/26/10/104201">Chinese Physical Society</a></li> <li><a href="https://iopscience.iop.org/article/10.1088/1674-1056/26/10/104201">IOP Science</a>_</li> </ul>]]></content><author><name></name></author><category term="thin film"/><category term="photonic quasicrystal"/><category term="photonic crystal"/><category term="nanophotonics"/><category term="radiative cooling"/><summary type="html"><![CDATA[In this paper, an optical radiative cooler with quasi-Cantor structure is theoretically proposed and analyzed. This simple and symmetrically designed optical structure operates upon continuous thermal sources in diurnal subtropical conditions, and its efficiency is much higher than natural cooling, for instance, when operating upon a typical 323.15 K continuous thermal source with a wind speed at 3 m/s, it can generate a net cooling power of 363.68 W/m², which is 18.26% higher than that of non-radiative heat exchange (natural cooling) under the same conditions. Additionally, several aspects are considered in its design to ensure a low cost in application, which is of great economical and environmental significance.]]></summary></entry><entry><title type="html">Archive of my Android development</title><link href="https://jiaye-wu.github.io/blog/2015/android-archive/" rel="alternate" type="text/html" title="Archive of my Android development"/><published>2015-07-29T21:01:00+00:00</published><updated>2015-07-29T21:01:00+00:00</updated><id>https://jiaye-wu.github.io/blog/2015/android-archive</id><content type="html" xml:base="https://jiaye-wu.github.io/blog/2015/android-archive/"><![CDATA[<p>I was an active Android developer at various forums from 2011 to 2015 before I entered academia. This post serves as an archive and a commemoration for my development projects.</p> <h2 id="communities">Communities</h2> <ol> <li>World’s First 100 Developers for Lenovo NBD newglass C100 smartglass, Lenovo (awarded a C100 dev model)</li> <li>Moderator, Lenovo NBD Forums (closed).</li> <li>Moderator, Jide Remix Forums (closed, now toB).</li> <li>Developer: <ul> <li>Jide Remix Ultratablet (sk1w/sk1wg)</li> <li>Lenovo NBD newglass C100</li> <li>Lenovo LePad/IdeaPad A1_07 (a1107)</li> <li>MOTOROLA RAZR V (yangtze: XT885/XT887/XT889)</li> <li>MOTOROLA DEFY (jordan: MB525/MB526/ME525/ME526)</li> <li>MoKee Open Source Project (closed)</li> </ul> </li> </ol> <h2 id="projects-still-accessibleexisting">Projects (still accessible/existing)</h2> <ul> <li>Repositories for development (Original developement/Fork/What’s left of the projects (imcomplete): Remix Ultratablet/A1_07/RAZR V) <a href="https://github.com/TerenceWSK?tab=repositories">TWSK/TerenceWSK</a></li> <li>Lenovo NBD newglass C100 <ul> <li><a href="https://xdaforums.com/t/one-click-safe-root-for-lenovo-nbd-new-glass-c100.3167810/">0-day one-click safe root</a></li> <li><a href="https://xdaforums.com/t/rooted-factory-image-for-lenovo-nbd-new-glass-c100-based-on-build1-2-updated.3167845/">Rooted factory image</a></li> <li><a href="https://xdaforums.com/t/google-xe12-preview-for-lenovo-nbd-new-glass-c100.3167891/">Google Glass XE12 preview port for newglass C100</a></li> </ul> </li> </ul>]]></content><author><name></name></author><category term="development"/><category term="android development"/><category term="open source"/><category term="free software"/><summary type="html"><![CDATA[this is a post dedicated to my discontinued Android development projects]]></summary></entry></feed>